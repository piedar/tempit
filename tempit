#!/usr/bin/python3 -u
# SPDX-License-Identifier: AGPL-3.0-only

import os
from pathlib import Path

# todo: hopefully this will all be handled in the kernel someday
# see https://lwn.net/ml/all/20250308183812.118311-2-srinivas.pandruvada@linux.intel.com/


temp_limit_max = int(os.environ.get('TEMPIT_MAX', 95))


class CoolingDevice:
    def __init__(self, path):
        self._path = path

    def __str__(self):
        return f"{self.type} at {self._path}"

    @property
    def type(self):
        return (self._path / 'type').read_text().strip()

    @property
    def cur_state(self):
        return int((self._path / 'cur_state').read_text().strip())
    @cur_state.setter
    def cur_state(self, value):
        (self._path / 'cur_state').write_text(str(value))

    @property
    def max_state(self):
        return int((self._path / 'max_state').read_text().strip())


def find_tcc():
    thermal = Path('/sys/class/thermal')
    for device in thermal.glob('cooling_device*'):
        device_type = (device / 'type').read_text().strip()
        if device_type == 'TCC Offset':
            return CoolingDevice(device)


def hold_tcc(tcc):
    tjmax = 100
    def get_tcc_limit(): return tjmax - tcc.cur_state
    def set_tcc_limit(limit): tcc.cur_state = tjmax - limit
    def get_tcc_limit_min(): return tjmax - tcc.max_state


    from datetime import datetime, timedelta
    from time import sleep

    last_adjustment = None
    last_auto_lower = None

    def ready_for_auto_lower():
        return last_adjustment is not None and (last_auto_lower is None or datetime.now() > (last_auto_lower + timedelta(seconds = 30)))

    def ready_for_auto_higher():
        return last_adjustment is not None and datetime.now() > (last_adjustment + timedelta(minutes = 10))

    temp_limit = temp_limit_max
    print(f"attempting to hold temperature below {temp_limit} using {tcc}")

    while True:
        temp_limit_cur = get_tcc_limit()

        if temp_limit_cur != temp_limit:
            if ready_for_auto_lower():
                # sometimes the TCC offset resets to 0 possibly because the CPU hits its own limit despite our efforts
                # compensate by lowering the target temperature automatically
                temp_limit -= 1
                last_auto_lower = datetime.now()
            print(f"adjusting temperature limit from {temp_limit_cur} to {temp_limit}")
            set_tcc_limit(temp_limit)
            last_adjustment = datetime.now()
        else:
            if temp_limit < temp_limit_max and ready_for_auto_higher():
                # we lowered the target temperature automatically a while ago
                # try loosening this restriction and see if things stabilize
                temp_limit += 1
                print(f"adjusting temperature limit from {temp_limit_cur} to {temp_limit}")
                set_tcc_limit(temp_limit)
                last_adjustment = datetime.now()
        sleep(5)


tcc = find_tcc()
if tcc is None:
    print('tcc not found - other methods not yet implemented')
    sys.exit(2)

hold_tcc(tcc)
